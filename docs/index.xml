<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>肖大宝的技术博客</title>
    <link>https://xiaodabao.github.io/blog/</link>
    <description>Recent content on 肖大宝的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Aug 2021 00:16:39 +0800</lastBuildDate><atom:link href="https://xiaodabao.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ShortestResponse</title>
      <link>https://xiaodabao.github.io/blog/posts/shortestresponse/</link>
      <pubDate>Sat, 21 Aug 2021 00:16:39 +0800</pubDate>
      
      <guid>https://xiaodabao.github.io/blog/posts/shortestresponse/</guid>
      <description>负载均衡 最短响应时间算法 从实际出发，研究在开源软件中已实现的算法。本文具体分析负载均衡-最短响应时间算法，基于dubbo的ShortestResponseLoadBalance源码。本方法和上次介绍的最少活跃数算法的思路基本一样。
1.准备多个Invoker, 每个Invoker设置具体的名字，权重，调用次数，随机生成平均调用时间，当前调用活跃数 2.多次调用selectInvoker方法，打印所有Invoker的活跃数，最终选择的Invoker名称 3.每次选择完成后，更新调用次数+1
上代码
import java.util.ArrayList; import java.util.List; import java.util.concurrent.ThreadLocalRandom; public class ShortestResponseLoadBalance { public static final String NAME = &amp;#34;shortestresponse&amp;#34;; public static Invoker doSelect(List&amp;lt;Invoker&amp;gt; invokers) { // Number of invokers  int length = invokers.size(); // 估算最短的响应时间 基于之前调用成功的平均耗时 * 当前正在调用的次数 active  long shortestResponse = Long.MAX_VALUE; // 多个Invoker可能具有相同的最短响应时间  int shortestCount = 0; // 记录选择的Invoker的索引, 他们具有相同的最短响应时间  int[] shortestIndexes = new int[length]; // 记录选择的Invoker的权重  int[] weights = new int[length]; // The sum of the warmup weights of all the shortest response invokers  int totalWeight = 0; // The weight of the first shortest response invokers  int firstWeight = 0; // Every shortest response invoker has the same weight value?</description>
    </item>
    
    <item>
      <title>LeastActive</title>
      <link>https://xiaodabao.github.io/blog/posts/leastactive/</link>
      <pubDate>Thu, 19 Aug 2021 00:08:12 +0800</pubDate>
      
      <guid>https://xiaodabao.github.io/blog/posts/leastactive/</guid>
      <description>负载均衡 最少活跃数算法 从实际出发，研究在开源软件中已实现的算法。本文具体分析负载均衡-最少活跃数算法，基于dubbo的LeastActiveLoadBalance源码。
 准备多个Invoker, 每个Invoker设置具体的名字，权重，调用次数，随机生成活跃调用数 多次调用selectInvoker方法，打印所有Invoker的活跃数，最终选择的Invoker名称 每次选择完成后，更新调用次数+1  这种方式比较适合所有服务配置差不多的情形，大部分的情况下和设置的权重关系不大，在不同的服务器配置环境下，就不能有效的利用配置更好的服务器资源。
上代码
import java.util.ArrayList; import java.util.List; import java.util.concurrent.ThreadLocalRandom; public class LeastActiveLoadBalance { public static final String NAME = &amp;#34;leastactive&amp;#34;; public static Invoker doSelect(List&amp;lt;Invoker&amp;gt; invokers) { // Number of invokers  int length = invokers.size(); // 最少的正在调用次数  int leastActive = -1; // 多个Invoker可能具有相同的调用次数  int leastCount = 0; // 记录选择的Invoker的索引, 他们具有相同的最少调用次数  int[] leastIndexes = new int[length]; // 记录选择的Invoker的权重  int[] weights = new int[length]; // totalWeight, 套路和随机算法差不多, 如果有多个最少调用次数的Invoker,  // 再根据权重概率随机选择一个Invoker  int totalWeight = 0; int firstWeight = 0; boolean sameWeight = true; // 存储随机生成的Invoker.</description>
    </item>
    
    <item>
      <title>ConsistentHash</title>
      <link>https://xiaodabao.github.io/blog/posts/consistenthash/</link>
      <pubDate>Tue, 17 Aug 2021 23:07:44 +0800</pubDate>
      
      <guid>https://xiaodabao.github.io/blog/posts/consistenthash/</guid>
      <description>负载均衡 一致性Hash算法 从实际出发，研究在开源软件中已实现的算法。本文具体分析负载均衡-一致性Hash算法，基于dubbo的ConsistentHashLoadBalance源码。
一致性Hash算法需要ConsistentHashSelector的数据结构, 内部使用TreeMap来存储Invoker和其对应的HashCode值，为了保证请求的均匀调用，一般都采用一个Invoker映射为多个虚拟节点的方式，好处很多，自行搜索。当有请求到达时，根据请求的参数来计算本次请求的Hash值，可以自行定义选择N个参数来参与Hash值的计算，相同参数的请求可以定位至同一个Invoke上（前提是Invoker列表未发生变化）
10个Invoker在Hash环上的分布情况： 分布可能十分不均匀，造成某些服务器压力过大。
增加多个虚拟Invoker后的分布情况： 仅画出了Invoker1的分布情况 测试代码：
 准备多个Invoker, 每个Invoker设置具体的名字，权重，调用次数 启动多个线程，每个线程分别多次调用selectInvoker方法 每次选择完成后，更新调用次数+1 全部调用完成后，输出每个Invoker的调用次数 设置同样的请求参数，打印每次选择的Invoker name  上代码
import java.nio.charset.StandardCharsets; import java.security.MessageDigest; import java.security.NoSuchAlgorithmException; import java.util.*; import java.util.concurrent.ConcurrentHashMap; import java.util.concurrent.ConcurrentMap; import java.util.concurrent.CountDownLatch; public class ConsistentHashLoadBalance { public static ThreadLocal&amp;lt;MessageDigest&amp;gt; MD5 = new ThreadLocal&amp;lt;&amp;gt;(); public static final String NAME = &amp;#34;consistenthash&amp;#34;; /** * Hash nodes name */ public static final String HASH_NODES = &amp;#34;hash.nodes&amp;#34;; /** * Hash arguments name */ public static final String HASH_ARGUMENTS = &amp;#34;hash.</description>
    </item>
    
    <item>
      <title>Load Balance RoundRobinLoadBalance</title>
      <link>https://xiaodabao.github.io/blog/posts/roundrobin/</link>
      <pubDate>Sun, 15 Aug 2021 22:10:59 +0800</pubDate>
      
      <guid>https://xiaodabao.github.io/blog/posts/roundrobin/</guid>
      <description>负载均衡 轮询算法 从实际出发，研究在开源软件中已实现的算法。本文具体分析负载均衡-轮询算法，基于dubbo的RoundRobinLoadBalance源码。
 准备多个Invoker, 每个Invoker设置具体的名字，权重，调用次数 启动多个线程，每个线程分别多次调用selectInvoker方法 每次选择完成后，更新调用次数+1 全部调用完成后，输出每个Invoker的调用次数  上代码
import java.util.ArrayList; import java.util.List; import java.util.concurrent.ConcurrentHashMap; import java.util.concurrent.ConcurrentMap; import java.util.concurrent.CountDownLatch; import java.util.concurrent.atomic.AtomicLong; public class RoundRobinLoadBalance { /** * 轮询+权重 */ protected static class WeightedRoundRobin { /** * weight是权重值, 在setWeight方法中进行设置, 同时将current(可认为是优先级)设置为0 */ private int weight; private AtomicLong current = new AtomicLong(0); public void setWeight(int weight) { this.weight = weight; current.set(0); } /** * Invoker每经过一次选择, 都将其优先级提高weight, 优先级提高, 下次被选中的几率变大 * @return */ public long increaseCurrent() { return current.</description>
    </item>
    
    <item>
      <title>Load Balance RandomLoadBalance</title>
      <link>https://xiaodabao.github.io/blog/posts/random/</link>
      <pubDate>Sat, 14 Aug 2021 10:25:40 +0800</pubDate>
      
      <guid>https://xiaodabao.github.io/blog/posts/random/</guid>
      <description>负载均衡 随机算法 从实际出发，研究在开源软件中已实现的算法。本文具体分析负载均衡-随机算法，基于dubbo的RandomLoadBalance源码。
 准备多个Invoker, 每个Invoker设置具体的名字，权重，调用次数 启动多个线程，每个线程分别多次调用selectInvoker方法 每次选择完成后，更新调用次数+1 全部调用完成后，输出每个Invoker的调用次数  上代码
import java.util.concurrent.atomic.AtomicInteger; public class Invoker { public String name; public int weight; public AtomicInteger invokeCount; public Invoker(String name, int weight) { this.name = name; this.weight = weight; invokeCount = new AtomicInteger(0); } } import java.util.ArrayList; import java.util.List; import java.util.concurrent.CountDownLatch; import java.util.concurrent.ThreadLocalRandom; /** * 负载均衡 权重随机算法 */ public class RandomLoadBalance { public static Invoker doSelect(List&amp;lt;Invoker&amp;gt; invokers) { // Number of invokers  int length = invokers.</description>
    </item>
    
  </channel>
</rss>
